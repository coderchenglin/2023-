//#include<stdio.h>
//int a = 0;
//
//int main()
//{
//	int a = 1;
//	printf("%d\n", a);   // 1     
//	printf("%d\n", ::a);   //  0      
//	//如何打印全局的a?
//	//使用域作用限定符,  ::a,左边是空白代表是全局域,就代表在全局里面找
//
//	return 0;
//}

//1.
#include<iostream>
#include<stdio.h>
#include<stdlib.h>

using namespace std;
//
//namespace lp
//{
//	int rand = 10;
//	//这个rand是一个全局变量.是存在静态区里的
//	//命名空间不影响生命周期,只是限定域,编译查找规则
//	//只有声明在函数里的(在栈里,因为存在栈帧中)变量,才是局部变量
//}

//const -- 常量区
//static -- 静态区

//void func()
//{
//	printf("%d\n", rand);   // 2061889648
//}
//
//int main()
//{
//	//int rand = 10;
//	//cout << rand << endl;    //10
//
//	func();
//	printf("%d\n", rand);    // 2061889648
//	//说明:这个地方,首先会去局部找rand,然后局部没有,再去全局找rand.因为把<stdlib.h>这个头文件展开
//	//里面有rand()函数,所以这个rand,就是函数名,打印出来的是这个rand函数的地址
//
//	//如果全局也找不到,就会报错,不会再去lp这个命名空间里面去找rand;
//
//	//想在命名空间里面找,就使用::域作用限定符
//	printf("%d\n", lp::rand);   // 10
//
//	return 0;
//}


////2.命名空间里不仅可以定义变量,还可以定义函数和类型
//namespace lp
//{
//	int rand = 10;
//	int x = 1;
//
//	int Add(int left, int right)
//	{
//		return left + right;
//	}
//
//	struct Node
//	{
//		struct Node* next;
//		int val;
//	};
//}

////3.命名空间里面还可以嵌套命名空间
//namespace lp
//{
//	int rand = 10;
//	int x = 1;
//
//	int Add(int left, int right)
//	{
//		return left + right;
//	}
//
//	struct Node
//	{
//		struct Node* next;
//		int val;
//	};
//
//	namespace lp2
//	{
//		int x = 2;
//	}
//}
//
//int main()
//{
//	cout << lp::lp2::x << endl;   //2
//
//	return 0;
//}


//重点:
//std  : 是C++官方库内容定义的命名空间
//官方库里就是这么实现的,把多个头文件,如Stack.h,Queue.h等头文件,定义在多个头文件中,把他们都定义在同一个命名空间
//如namespace std.    那么这些头文件都会合并到std这个命名空间中


////补充:不重要        ->     嵌套同名的N1是不会合并的,只有同一级的才会合并
//namespace N1
//{
//	int a = 1;
//	namespace N1
//	{
//		int b = 2;
//	}
//}
//
//int main()
//{
//	cout << N1::N1::b << endl;  //2
//
//	return 0;
//}




//#include <iostream>
//
//using namespace std;   //关键字:using namespcae 将命名空间展开
////日常练习,小程序可以,   项目里面最好不这么用
//
////部分展开:     关键字:using    --   只把常用的展开,自己定义的时候避免跟常用重名即可
//using std::cout;

//int main()
//{
//	std::cout << "hello world" << std::endl;
//
//	return 0;
//}


//4.c++输入输出
//#include<iostream>
//using namespace std;

//int main()
//{
//	//cout可以认为就是控制台     c  -  console  --  控制台
//	//   <<  -- 流插入运算符
//	cout << "hello world!!" << endl;
//
//
//	//cin
//	//  >>   --   流提取运算符
//	int a;
//	double b;
//	char c;
//
//	//<<和>>都可以自动识别类型
//
//	cin >> a;
//	cin >> b >> c;
//	cout << a << endl;
//	cout << b << "  " << (int)c << endl;    //可以进行强转
//
//	//如果想控制小数点后位数,建议直接使用printf
//
//	return 0;
//}




//5.缺省值
//#include<iostream>
//using namespace std;
//
////void Func1(int a = 0)     //缺省参数,给缺省值
////{
////	cout << a << endl;
////}
//
//void Func2(int a = 10,int b = 20,int c = 30)     //缺省参数,给缺省值  --  缺省值只能从右往左给 -- 不能不给c缺省值,直接给b缺省值
//{
//	   cout << a <<b << c << endl;
//}
//
//int main()
//{
//	//Func1();   //0
//	//Func1(10);   //10
//
//	 
//	//可以给多个缺省值,只能从左往右传   --  不能直接跳过b,传a和c
//	Func2();
//	Func2(1);
//	Func2(1, 2);
//	Func2(1, 2, 3);
//	
//
//	return 0;
//}
//
////注意:
////缺省参数不能在声明和定义里同时出现   --  害怕你两边的缺省值不一样  
////只能在  .h中定义,    不能在  .cpp中定义  -- 即在声明中给

//缺省值总结:
//1. 部分缺省参数必须 从左往右 依次来给出,不能间隔跳
//2. 缺省参数不能在函数声明和定义中同时出现   ---   只能定义在.h中,不能定义咋.cpp中   --  即在声明中给
//3. 缺省值必须是常量或全局变量(比较少)
//4. c语言不支持


////6.函数重载  -- 函数名相同,参数不同(个数,类型,顺序)   ---   没有返回值不同!!!
//int add(int x, int y)
//{
//	return x + y;
//}
//
//double add(double x, double y)
//{
//	return x + y;
//}
//
//
////顺序不同本质还是形参的类型不同
//
////有一个经典的函数:swap
//void swap(int* px, int* py)
//{
//	int tmp = *px;
//	*px = *py;
//	*py = tmp;
//}
//
//void swap(double* px, double* py)
//{
//	int tmp = *px;
//	*px = *py;
//	*py = tmp;
//}
//
//int main()
//{
//	cout << add(1, 2) << endl; 
//	cout << add(1.1, 2.2) << endl;
//
//	return 0;
//}
 


////注意:下面两个函数,语法上构成函数重载,但是在调用  f()  时,会构成二义性,不知道调用的是哪个
//void f()
//{
//	cout << "f()" << endl;
//}
//
//void f(int a = 0,char b = 1)
//{
//	cout << "f(int a, char b)" << endl;
//}
//
//int main()
//{
//	f(10);      
//	f(10, 20);
//
//	 //f();    //歧义 - 二义性   //会报错
//}



//7.符号表

//在C / C++编译过程中，符号表是一个数据结构，它包含了在程序中定义的所有标识符的信息，例如变量、函数和类型等。符号表在编译过程中扮演着非常重要的角色，它可以帮助编译器识别和管理程序中的标识符，以便正确地解析代码并生成可执行程序。
//
//符号表包含了以下信息：
//
//标识符的名称
//标识符的数据类型
//标识符的存储位置
//标识符的作用域
//标识符的值（如果有的话）
//标识符的定义位置
//在编译器将源代码转换成可执行文件的过程中，编译器将扫描源代码，并将标识符的信息添加到符号表中。在编译器生成代码的过程中，编译器将使用符号表来查找和解析程序中的标识符，以便将其正确转换成机器代码。
//
//在C / C++中，符号表可以被访问和修改。程序员可以使用关键字如“extern”、“static”、“auto”等来改变符号表中的信息。例如，“extern”关键字可以将标识符的定义延迟到其他文件中，而“static”关键字可以将标识符的作用域限制在当前文件中。



//符号表在c语言和c++中的不同:

//在C和C++中，符号表的基本概念是相同的，它们都是一个数据结构，用于存储程序中定义的标识符的信息。但是，由于C++是C的超集，因此C++在C的基础上增加了一些特性，这些特性在符号表方面也有所不同。
//
//以下是C和C++中符号表的主要区别：
//
//函数重载：C++支持函数重载，这意味着在一个作用域中可以定义多个同名的函数，只要它们的参数列表不同即可。C++编译器使用符号表来区分这些重载函数，以便正确解析调用它们的代码。
//
//成员函数：C++中的类可以包含成员函数，这些函数具有类作用域。C++编译器使用符号表来管理这些成员函数的名称、参数列表、访问控制等信息。
//
//模板：C++支持模板，这是一种泛型编程技术，允许定义通用的函数和类，可以用不同的类型参数来实例化它们。C++编译器使用符号表来管理模板的名称、参数列表、定义位置等信息。
//
//命名空间：C++中的命名空间是一种用于避免命名冲突的机制，它允许在一个作用域中定义一组相关的标识符。C++编译器使用符号表来管理命名空间中的名称和作用域等信息。
//
//异常处理：C++中的异常处理是一种在程序执行期间处理错误的机制，它允许程序在出现异常情况时跳转到特定的异常处理代码块。C++编译器使用符号表来管理异常处理相关的信息，例如异常类型、处理函数等。


//c++中如何支持函数重载?
//c++中:函数的参数也参与函数名字的修饰
//即函数名修饰规则与c不同


//为什么返回值不参与函数名修饰?
//因为在函数调用时,我无法区分,会产生二义性  :  我在函数调用时不会指定返回值类型!




////8.引用   ---类型后面跟&,就是引用
//int main()
//{
//	int a = 10;
//	int& ra = a;   //引用  --  就是给a取了别名  --  ra
//
//	int& x = a;  //给a再取一个别名x
//	int& y = a;  //给x再取一个别名y
//
//	//上面这段代码的意思是,a这块空间现在有4个别名
//
//	int* p = &a;  //取地址
//
//	return 0;
//}


//引用使用案例:
//1.
//void swap(int& m, int& n)        //--- 就不用取地址啦 
//{
//	int tmp = m;
//	m = n;
//	n = tmp;
//}
//
//int main()
//{
//	int a = 1;
//	int b = 2;
//	printf("a = %d,b = %d\n", a, b);   //1  2
//
//	swap(a, b);   //函数用引用实现,那么就可以直接传 '值' 不用传 '地址' 了  --- 爽~
//	printf("a = %d,b = %d\n", a, b);   //2  1
//
//	return 0;
//}


//2.
struct ListNode
{
	struct ListNode* next;
	int val;
};

//void SlistPushBack(struct ListNode** pphead,int x)
//{
//	//我要改变plist,就得使用pphead(plist的地址)才行
//
//
//}

//c++出来以后,就不需要再用二级指针了,可以使用别名
//void SlistPushBack(struct ListNode*& phead, int x)
//{
//
//}

//int main()
//{
//	//以前使用指针,要改变plist指针,需要传plist指针的地址过去
//	struct ListNode* plist = NULL;
//	SlistPushBack(&plist, 1);
//	SlistPushBack(&plist, 2);
//
//	return 0;
//}




//再来看看以前的一个代码:
//typedef struct ListNode
//{
//	struct ListNode* next;
//	int val;
//}LTNode,*PLTNode;
//
//void SlistPushBack(PLTNode& phead,int x)
//{}

//PLTNode就是一个指针变量,PLTNode&就是这个指针变量的别名



//代码解释:
//这段代码定义了一个结构体ListNode，包含一个指向下一个ListNode结构体的指针next和一个int类型的成员变量val。然后，通过typedef定义了一个别名LTNode，以及一个指向LTNode的指针类型PLTNode。
//
//接下来，定义了一个函数SlistPushBack，该函数的参数为一个指向PLTNode类型指针的引用phead和一个int类型的参数x。函数的作用是将一个新的ListNode结构体节点添加到链表的末尾。
//
//在函数定义中，使用PLTNode& 作为参数类型，表示传递的是一个指向PLTNode类型指针的引用，这样可以通过修改该指针的指向，改变链表的头节点。同时，该函数不需要返回任何值，因此返回类型为void。
//
//总体来说，这段代码定义了一个带有结构体指针和引用参数的函数，用于链表的插入操作。同时使用了typedef定义结构体的别名和指向结构体的指针类型的别名，提高了代码的可读性和可维护性。
//
//
