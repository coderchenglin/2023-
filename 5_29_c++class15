#include <iostream>
#include <vector>

using namespace std;

void test_vector1()
{
	vector<int> v;
	v.push_back(1);
	v.push_back(2);
	v.push_back(3);
	v.push_back(4);
	v.push_back(5);

	// []不是万能的 真正万能的是迭代器
	for (size_t i = 0; i < v.size(); ++i)
	{
		cout << v[i] << " ";
	}
	cout << endl;

	//迭代器
	vector<int>::iterator it = v.begin();   //类模板要显示调用
	while (it != v.end())
	{
		cout << *it << " ";
		++it;
	}
	cout << endl;

	//范围for
	for (auto e : v)
	{
		cout << e << " ";
	}
	cout << endl;

	//这个接口基本没啥价值  -- (早该干掉了)
	cout << v.max_size() << endl;  //1073741823  这里不是四十二亿九千万 是十亿多,因为它显示的是个数

	//这两个并不一样
	vector<char> vstr;
	string str;

	//reserve 只阔容不缩容
	//resize 也只扩容不缩容


}

int main()
{
	test_vector1();

	return 0;
}


//OJ题
//1.只出现一次的数字(简单)

//class Solution
//{
//public:
//	int singleNumber(vector<int>& nums)
//	{
//		int ret = 0;
//		for (auto e : nums)
//			ret ^= e;
//
//		return ret;
//	}
//};


//2.杨辉三角(好题)
//给定一个非负整数numRows,生成杨辉三角的 前numRows行

class Solution
{
public:
	vector<vector<int>> generate(int numRows)
	{
		vector<vector<int>> vv;
		vv.resize(numRows);
		for (size_t i = 0; i < vv.size(); ++i)
		{
			//开空间 : 第一行1个,第二行2个.....
			vv[i].resize(i + 1,0);
			//并把每行的第一个和最后一个,初始化为1
			vv[i][0] = vv[i][vv[i].size() - 1] = 1;
		}

		for (size_t i = 0; i < vv.size(); ++i)
		{
			for (size_t j = 0; i < vv[i].size(); ++j)
			{
				if (vv[i][j] == 0)
				{
					vv[i][j] = vv[i - 1][j - 1] + vv[i - 1][j];
				}
			}
		}

		return vv;
	}
};
