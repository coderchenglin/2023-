1
#include<iostream>
using namespace std;

//类中的static对象,生命周期是全局的,作用域受类域的限制
//static成员函数: 特点:
//1.可以通过类域名直接访问
//    解释如下:
//静态成员函数是与类关联而不是与类的实例（对象）关联的函数。因此，它们可以通过类域名直接访问，而不需要通过类对象进行访问。
//
//当我们声明一个静态成员函数时，它与类本身相关联，而不是与类的每个实例（对象）相关联。它不需要访问任何特定的对象状态或实例变量，因此可以独立于任何特定的对象存在。它在类的命名空间中存在，并且可以在没有创建类对象的情况下调用。
//
//通过类域名直接访问静态成员函数具有以下几个优点：
//
//简洁性：由于静态成员函数与类相关联，不需要创建类对象即可访问它们。这使得代码更加简洁，不需要创建额外的对象实例。
//
//共享性：静态成员函数在所有类的实例之间共享。它们可以用于执行与类相关的任务，而无需考虑特定的对象状态。这使得静态成员函数非常适合执行一些通用操作，例如对类的静态数据成员进行操作或执行与类本身相关的计算。
//
//需要注意的是，由于静态成员函数不与类对象关联，因此它们无法直接访问非静态成员变量或成员函数。它们只能访问类的静态成员变量和其他静态成员函数。

//2.没有this指针,(即不与对象关联),无法直接访问非静态成员变量或成员函数,只能访问类的静态成员变量和其他静态成员函数

//class A
//{
//public:
//	int GetN()
//	{
//		return n;
//	}
//
//	//static int GetN()
//	//{
//	//	return n;
//	//}
//
//private:
//	static int n;
//};
//
//
//int A::n = 0;
//
//int main()
//{
//	//cout << A::n << endl;   //这样可以访问到的前提是,n是公有的,但一般都不会是公有的
//
//	//A aa1;
//	//cout << aa1.n << endl;  //也可以用这个类创建的对象来访问
//
//	//A* ptr = &aa1;
//	//cout << ptr->n << endl;   //也可以用指针访问
//
//	//A* ptr1 = nullptr;   
//	//cout << ptr->n << endl;   //这也不会报错!  这里类似于this指针访问成员函数
//	//                                           //记住!  :  成员函数没有存在对象里,所以用空指针访问不会报错,因为没有解引用
//	//                                           //             同理:  类里面的static变量也没有存在对象中,存在静态区,所以用空指针进行访问不会报错,因为没有发生解引用
//
//
//
//	//不是成员变量n不是公有的怎么办?
//	//方法1:在类里面写一个函数GetN()
//	A aa1;
//	cout << aa1.GetN() << endl;     
//	//cout << A::GetN() << endl;        // 报错,不能通过类域名调用
//
//	//方法2:使用静态成员函数   --   静态成员函数没有this指针
//	//cout << A::GetN() << endl;    //这样通过类域就可以调用了,因为静态成员函数没有this指针
//	
//	//注意:
//	//但是静态成员函数,   因为!没有this指针  ,  它无法访问非静态的成员, 只能访问静态成员变量
//
//	return 0;
//}






//oj题:
//求1 + 2 + ... + n;


////这道题完美的体现了 静态的价值
//class Sum
//{
//public:
//	Sum()
//	{
//		_ret += _i;
//		++_i;
//	}
//
//	static int GetRet()
//	{
//		return _ret;
//	}
//
//private:
//	static int _i;
//	static int _ret;
//};
//
//
////静态成员变量,只能在类外面定义
//int Sum::_i = 1;
//int Sum::_ret = 0;
//
//class Solution 
//{
//public:
//
//	int Sum_Solution(int n)
//	{
//		//这里使用的c99标准中的  变长数组  .  VS没有支持
//		Sum arr[n];         //调用n次构造函数,  每次调用构造函数,实现累加
//
//		return Sum::GetRet();
//	}
//};




//static成员函数的作用:不与实例化对象相关联,而是与类相关联(直接用类名调用函数)
// 
//class A
//{
//public:
//	//A& GetObj(int a = 0)
//	static A GetObj(int a = 0)
//	{
//		A aa(a);
//		return aa;
//	}
//
//private:
//	A(int a = 0)
//		:_a(a)
//	{}
//
//private:
//	int _a;
//};
//
//int main()
//{
//	//这三个都需要调用构造函数     ----     如果构造函数变为私有,则这三条创建对象的路子都不可行 
//	static A aa1;        //创建对象在静态区
//	A* ptr = new A;   //堆上
//	A aa2;                  //栈上
//
//	//A aa3 = GetObj(10);     // 想创建这个对象,需要调用这个函数,想调用这个函数,需要先创建一个对象
//
//	//所以可以使用静态的成员函数,静态成员函数可以不需要实例化对象,直接通过类名进行访问
//	A aa3 = A::GetObj(10);  
//
//}




//友元
