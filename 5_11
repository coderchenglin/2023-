#include<iostream>

using namespace std;

//int main()
//{
//	int array[] = { 1,2,3,4,5 };
//
//
//	for (auto e : array)
//	{
//		cout << e << " ";
//	}
//	cout << endl;
//
//	return 0;
//}




//一.内联函数
//以inline修饰的函数叫做内联函数,编译时c++编译器会在调用内联函数的地方展开,没有函数调用建立栈帧的开销
//内联函数提升程序运行的效率

//在编译期间,编译器会用函数体替换函数的调用  ->  作用:优化 没有栈帧消耗
//使用场景:频繁调用的小函数

//c语言解决的方法是:宏
//宏的缺点:
//1.不能调试
//2.没有类型安全的检查
//3.容易写错

//写一个ADD的宏函数:   背下来!!!
#define ADD(x,y) ((x)+(y))

//int main()
//{
//	int ret = ADD(1, 2);
//	cout << ret << endl;
//
//	//1.不能加分号
//	if(ADD(1,2))  //  ->if(((x)+(y));)  报错
//	{ }
//
//	//2.如果不加外层括号     ->   优先级会存在问题
//	ADD(1, 2) * 3;   //     (x)+(y) * 3 
//
//	//3.如果不加内层括号     ->    优先级会
//	int a = 1, b = 2;
//	ADD(a | b, a & b);    //     (a | b + a & b);    ->这个+号的优先级更高
//
//	return 0;
//}


//inline int Add(int x, int y)
//{
//	return x + y;
//}
//
//int main()
//{
//	Add(1, 3);
//
//	return 0;
//}


//推荐使用inline const cnum替代宏

//我使用inline,只是建议编译器展开,但是具体展不展开,取决于编译器
//如果函数长了,可能会引起代码膨胀,可能就不会展开了

//代码长了,会影响可执行程序的大小   ---   安装包


//inline是一种以 空间换时间 的做法,这个空间是指  :  编译出来的可执行程序大小.

//内联函数不能声明和定义分离.

#include "stack.h"

//int main()
//{
//	int ret = func1();     //链接错误 :  fatal error LNK1120 : 1 个无法解析的外部命令
//	cout << ret << endl;
//
//}


//1.
//int main()
//{
//	int x = 10;
//	auto a = &x;      //int* a = &x
//	auto* b = &x;    //int* b = &x
//	auto& c = x;      //int& c = x
//
//	cout << typeid(a).name() << endl;   //int*
//	cout << typeid(b).name() << endl;   //int*
//	cout << typeid(c).name() << endl;   // int
//
//	return 0;
//}


//注意:
//1. auto不能作为函数的参数

//2. auto不能直接用来声明数组

//3.auto 在实际中最常见的优势用法就是跟以后会讲到的c++11提供的新式for循环,还有lambda表达式等进行配合使用


//int main()
//{
//	int array[] = { 1,2,3,4,5 };
//
//	//for (auto e : array)
//	//{
//	//	e *= 2;
//	//}
//
//
//	//auto&  用法的使用场景  :   想改变arary的数组里的值,都变成原来的两倍,可以使用auto引用
//	for (auto& e : array)    //auto&
//	{
//		e *= 2;
//	}
//
//	for (auto e : array)
//	{
//		cout << e << " ";
//	}
//	cout << endl;
//
//	return 0;
//}



//范围for循环的使用条件:
//1.for循环迭代的范围必须是确定的
//  对于数组而言,就是数组中的第一个元素和最后一个元素的范围
//	对于类而言,应该提供begin和end的方法,begin和end就是for循环迭代的范围
//
//	注意:一下代码就有问题:因为for的范围不确定
//
//void TestFor(int array[])   //这个array传进来不是数组,而是一个地址,for的范围不明确
//{
//	for (auto& e : array)
//		cout << e << endl;
//}
//
//2. 迭代的对象要实现++和==的操作  (涉及到迭代器的问题,以后讲)





//2.指针空值nullptr    ->   c++11以后,都使用nullptr来代替NULL

//define NULL 0      ->    在c++98中,NULL被定义为了0
//这是c++98里的一个bug

//看以下代码:

////这两个函数应该是构成了函数重载
//void f(int)
//{
//	cout << "f(int)" << endl;
//}
//
//void f(int*)
//{
//	cout << "f(int*)" << endl;
//}
//
//int main()
//{
//	f(0);			//f(int)
//	f(NULL);   //f(int)    ->   这里本来应该打印  f(int*)   但是在c++98中,NULL被定义成了0
//
//	f(nullptr);  //f(int*)   ->  所以在c++中,都不写NULL,改为写nullptr
//}



/////////////////////////////////////////////////////////////////////////////////////


//类和对象

