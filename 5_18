#include<iostream>
#include<string>
using namespace std;

//class A
//{
//public:
//	A(int a)
//		:_a1(a)
//		, _a2(_a1)
//	{}
//
//	void Print() {
//		cout << _a1 << " " << _a2 << endl;
//	}
//private:
//	int _a2;
//	int _a1;
//};
//
//class B
//{
//public:
//	B()
//	{}
//
//private:
//	//A _aa;
//	//int& _ref;
//};
//
//int main()
//{
//	//A  aa;
//	//B bb;
//
//	return 0;
//}

/////////////////////////////////////////////////////////////////////
// C++98
//class Date
//{
//public:
//	// 1. 单参构造函数，没有使用explicit修饰，具有类型转换作用
//	// explicit修饰构造函数，禁止类型转换---explicit去掉之后，代码可以通过编译
//	//explicit Date(int year)
//	/*Date(int year)
//		:_year(year)
//	{}*/
//
//	
//	// 2. 虽然有多个参数，但是创建对象时后两个参数可以不传递，没有使用explicit修饰，具有类型转换作用
//	// explicit修饰构造函数，禁止类型转换
//
//	Date(int year = 1, int month = 1, int day = 1)
//	: _year(year)
//	, _month(month)
//	, _day(day)
//	{}
//
//	/*
//	Date& operator=(const Date& d)
//	{
//		if (this != &d)
//		{
//			_year = d._year;
//			_month = d._month;
//			_day = d._day;
//		}
//
//		return *this;
//	}
//	*/
//private:
//	int _year;
//	int _month;
//	int _day;
//};
//
//
////string(const char* str)
////{}
////void push_back(const string& s);
//
//int main()
//{
//	int i = 0;
//	double d = i;
//	const double& rd = i;
//
//	Date d1(2022);
//	// 隐式类型的转换
//	Date d2 = 2022;
//	const Date& d5 = 2022;
//
//	Date d3(d1);
//	Date d4 = d1;
//
//	//string s1("hello");
//	//push_back(s1);
//
//	//string s2 = "hello";
//	//push_back(s2);
//
//	//push_back("hello");
//
//	return 0;
//}


////////////////////////////////////////////////////////
// 多参数构造 -- C++11

//class Date
//{
//public:
//	// 多参数构造
//	//explicit Date(int year, int month, int day)
//	Date(int year, int month, int day)
//		: _year(year)
//		, _month(month)
//		, _day(day)
//	{}
//
//	
//private:
//	int _year;
//	int _month;
//	int _day;
//};

//int main()
//{
//	Date d1 = { 2022, 10, 12 };
//
//	// 等价于
//	Date d2(2022, 10, 12 );
//
//	const Date& d3 = { 2022, 10, 12 };
//
//	return 0;
//}

//int N = 0;

//class A
//{
//public:
//	A(int a = 0)
//		:_a(a)
//	{
//		++N;
//	}
//
//	A(const A& aa)
//		:_a(aa._a)
//	{
//		++N;
//	}
//
//private:
//	int _a;
//
//public:
//	static int N; // 声明
//};
//
//// 生命周期是全局的，作用域受类域限制
//int A::N = 0;  // 定义初始化
//
//void F1(A aa)
//{}
//
//A F2()
//{
//	A aa;
//	return aa;
//}
//
//int main()
//{
//	A aa1(1);
//	A aa2 = 2;
//
//	A aa3 = aa1;
//
//	cout << A::N << endl;
//
//	F1(aa1);
//	cout << A::N << endl;
//
//	// --N;
//
//	F2();
//	cout << A::N << endl;
//	cout << aa1.N << endl;
//	
//	A* ptr = nullptr;
//	cout << ptr->N << endl;
//
//
//	return 0;
//}


//class A
//{
//public:
//	A(int a = 0)
//		:_a(a)
//	{
//		++N;
//	}
//
//	A(const A& aa)
//		:_a(aa._a)
//	{
//		++N;
//	}
//
//	// 休息到20:21继续
//	// 没有this指针，只能访问静态成员
//	static int GetN()
//	{
//		return N;
//	}
//
//private:
//	int _a;
//
//	static int N; // 声明
//};
//
//// 生命周期是全局的，作用域受类域限制
//int A::N = 0;  // 定义初始化
//
//void F1(A aa)
//{}
//
//A F2()
//{
//	A aa;
//	return aa;
//}

// 
//int main()
//{
//	/*A aa1(1);
//	A aa2 = 2;
//
//	A aa3 = aa1;
//
//	cout << aa1.GetN() << endl;
//
//	F1(aa1);
//	cout << aa1.GetN() << endl;*/
//
//	// --N;
//
//	F2();
//	/*A aa4;
//	cout << aa4.GetN() << endl;*/
//
//	cout << A::GetN() << endl;
//
//
//	return 0;
//}

// 要求类对象只能在栈上面
//class A
//{
//public:
//	static A GetObj(int a = 0)
//	{
//		A aa(a);
//		return aa;
//	}
//
//private:
//	A(int a = 0)
//		:_a(a)
//	{}
//
//private:
//	int _a;
//};
//
//int main()
//{
//	//static A aa1;
//	//A* ptr = new A;
//	//A aa2;
//
//	A aa3 = A::GetObj(10);
//
//	return 0;
//}

// 相当于两个独立的类
// B类的访问受A的类域和访问限定符的限制
//class A
//{
//private:
//	int _a;
//	static int k;
//
//public: // B天生就是A的友元
//	class B
//	{
//		int _b;
//
//		void foo(const A& a)
//		{
//			cout << k << endl;//OK
//			cout << a._a << endl;//OK
//		}
//	};
//};
//
//int A::k = 1;
//
//int main()
//{
//	cout << sizeof(A) << endl;
//	A aa;
//
//	A::B bb;
//
//	return 0;
//}

//class A
//{
//public:
//	A(int a = 0)
//		:_a(a)
//	{
//		cout << "A(int a)" << endl;
//	}
//
//	~A()
//	{
//		cout << "~A()" << endl;
//	}
//private:
//	int _a;
//};
//
//class Solution {
//public:
//	int Sum_Solution(int n) {
//		//...
//		return n;
//	}
//};
//
//A F()
//{
//	//A ret(10);
//	//return ret;
//	return A(10);
//}
//
//int main()
//{
//	// 有名对象
//	A aa0;
//	A aa1(1);
//	A aa2 = 2;
//
//	//A aa3();
//
//	// 匿名对象 --声明周期当前这一行
//	A();
//	A(3);
//
//	//Solution so;
//	//so.Sum_Solution(10);
//
//	Solution().Sum_Solution(10);
//
//	return 0;
//}

class A
{
public:
	A(int a = 0)
		:_a(a)
	{
		cout << "A(int a)" << endl;
	}

	A(const A& aa)
		:_a(aa._a)
	{
		cout << "A(const A& aa)" << endl;
	}

	A& operator=(const A& aa)
	{
		cout << "A& operator=(const A& aa)" << endl;

		if (this != &aa)
		{
			_a = aa._a;
		}

		return *this;
	}

	~A()
	{
		cout << "~A()" << endl;
	}

private:
	int _a;
};

//void f1(A aa)
//{}

//A f2()
//{
//	A aa;
//	return aa;
//}

A f3()
{
	/*A aa(10);
	return aa;*/

	return A(10);
}

// 《深度探索C++对象模型》

int main()
{
	// 优化场景1
	//A aa1 = 1;  // A tmp(1) + A aa1(tmp) -> 优化 A aa1(1)

	// 优化场景2
	/*A aa1(1);
	f1(aa1);*/

	//f1(A(1));  // 构造 + 拷贝构造  -> 优化 构造
	//f1(1);  // 构造 + 拷贝构造  -> 优化 构造

	// f2();	  // 构造+拷贝构造
	//A ret = f2(); // 构造+拷贝构造+拷贝构造 ->优化 构造+拷贝构造

	/*A ret;
	ret = f2();*/

	A ret = f3();  //  构造+拷贝构造+拷贝构造 -> 优化 -> 构造


	return 0;
}
