#pragma once
#include<iostream>
#include<string>
#include<assert.h>

using namespace std;


namespace lp
{
	template<class T>
	class vector
	{
	public:
		typedef T* iterator;
		typedef const T* const_iterator;

		iterator begin()
		{
			return _start;
		}

		iterator end()
		{
			return _finish;
		}

		const_iterator begin() const
		{
			return _start;
		}

		const_iterator end() const
		{
			return _finish;
		}

		T& operator[](size_t pos)
		{
			assert(pos < size());
			return _start[pos];
		}

		T& operator[](size_t pos) const
		{
			assert(pos < size());
			return _start[pos];
		}


		vector()
			:_start(nullptr)
			,_finish(nullptr)
			,_endofstorage(nullptr)
		{}



		//扩容
		void reserve(size_t n)
		{
			if (n > capacity())
			{
				size_t oldSize = size();
				//实现思路 : 开一块空间,拷贝数据,拷贝指针
				T* tmp = new T[n];  //c++中尽量用new,因为new会自动初始化,尤其是自定义类型必须要初始化
				//因为如果一开始,capacity为0,start为空nullptr,为空就不用拷贝数据了
				if (_start)
				{
					memcpy(tmp, _start, sizeof(T) * oldSize); // 拷贝数据
					delete[] _start;  //释放旧空间
				}

				_start = tmp;  //拷贝指针
				//_finish = _start + size();   这个写法是错的 因为_start改变后,size()的返回值也变了

				_finish = tmp + oldSize;   //所以把原来的size保存下来,oldSize
				_endofstorage = _start + n;

			}
		}

		void resize(size_t n,T val = T())
		{
			//三种情况,分两类
			if (n > capacity())
			{
				reserve(n);
			}

			if (n > size())
			{
				while (_finish < _start + n)
				{
					*_finish = val;
					++_finish;
				}
			}
			//注意这里不需要挨个挨个删除数据,直接改变_finish就行了
			else
			{
				_finish = _start + n;
			}

		}

		size_t size() const
		{
			return _finish - _start;
		}

		size_t capacity() const
		{
			return _endofstorage - _start;
		}

		void push_back(const T& x)
		{
			if (_finish == _endofstorage)
			{
				//2倍阔
				size_t newCapacity = capacity() == 0 ? 4 : capacity() * 2;
				reserve(newCapacity);
			}

			*_finish = x;
			++_finish;
		}

		void pop_back()
		{
			//检查,和stl保持一直
			//assert(empty());

			--_finish();
		}

		//第一种迭代器失效  --  扩容导致pos失效了  --  所以要更新pos
		void insert(iterator pos, const T& val)
		{
			assert(pos >= _start);
			assert(pos <= _finish);

			//注意! 扩容是异地阔 pos的地址已经不在新的start和finish之间了, pos需要更新处理
			if (_finish == _endofstorage)
			{
				size_t len = pos - _start; // 计算pos的相对位置

				size_t newCapacity = capacity() == 0 ? 4 : capacity() * 2;
				reserve(newCapacity);

				pos = _start + len;
			}

			iterator end = _finish - 1;
			while (end >= pos)
			{
				*(end + 1) = *end;
				--end;
			}

			*pos = val;
			++_finish;
		}

		void erase(iterator pos)
		{

		}


	private:
		iterator _start;
		iterator _finish;
		iterator _endofstorage;
	};

	void test_vector6()
	{
		vector<int> v;
		v.push_back(1);
		v.push_back(2);
		v.push_back(3);

		v.insert(v.end(), 4);
		v.insert(v.end(), 5);
		v.insert(v.end(), 6);
		v.insert(v.end(), 7);

		for (auto e : v)
		{
			cout << e << " ";  // 1 2 3 4 -842150451 6 7
		}
		cout << endl;
	}

	void test_vector7()
	{
		vector<int> v;
		v.push_back(1);
		v.push_back(2);
		v.push_back(3);
		v.push_back(4);

		vector<int>::iterator it = find(v.begin(), v.end(), 3);
		if (it != v.end())
		{
			v.insert(it, 30);
		}

		//这里it还能继续用嘛?  --  不能!可能迭代器失效(野指针)  --  而且越界不一定被检查出来(更恐怖)
		//(*it)++;

		for (auto e : v)
		{
			cout << e << " ";  // 1 2 3 4 -842150451 6 7
		}
		cout << endl;
	}
}








