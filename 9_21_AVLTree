#pragma once
#include<iostream>
#include<assert.h>

using namespace std;


template<class K,class V>
struct AVLTreeNode
{
	pair<K, V> _kv;
	AVLTreeNode<K, V>* _left;
	AVLTreeNode<K, V>* _right;
	AVLTreeNode<K, V>* _parent;

	int _bf;  //balance factor

	AVLTreeNode(const pair<K, V>& kv)
		:_kv(kv)
		,_left(nullptr)
		,_right(nullptr)
		,_parent(nullptr)
		,_bf(0)
	{}

};

template<class K,class V>
struct AVLTree
{
	typedef AVLTreeNode<K, V> Node;
public:
	bool Insert(const pair<K, V>& kv)  //插入的元素,是kv
	{
		if (_root == nullptr)
		{
			_root = new Node(kv);
			return true;
		}

		Node* parent = nullptr;
		Node* cur = _root;
		while (cur)
		{
			if (cur->_kv.first < kv.first) //kv比cur大,插在右边
			{
				parent = cur;
				cur = cur->_right;
			}
			else if (cur->_kv.first > kv.first) // 反之,插在左边
			{
				parent = cur;
				cur = cur->_left;
			}
			else
			{
				return false;
			}
		}

		cur = new Node(kv);
		if (parent->_kv.first < kv.first)
		{
			parent->_kv.first = cur->_kv.first;
			cur->_parent = parent;
		}
		else
		{
			parent->_left = cur->_kv.first;
			cur->_parent = parent;
		}

		// 1.更新平衡因子
		while (parent)
		{
			if (cur == parent->_left)
			{
				parent->_bf--;
			}
			else
			{
				parent->_bf++;
			}

			//即由 1->0,就不用向上持续更新了
			if (parent->_bf == 0)
			{
				break;
			}
			//由0->1或-1,则向上持续更新
			else if (parent->_bf == 1 || parent->_bf == -1)
			{
				cur = parent;
				parent = parent->_parent;
			}
			else if (parent->_bf == 2 || parent->_bf == -2)
			{
				//旋转
				if (parent->_bf == 2 && cur->_bf == 1)
				{
					RotateL(parent);
				}
				else if (parent->_bf == -2 && cur->_bf == -1)
				{
					RotateR(parent);
				}
				else if (parent->_bf == -2 && cur->_bf == 1)
				{
					RotateLR(parent);
				} 
				else if (parent->_bf == 2 && cur->_bf == -1)
				{
					RotateRL(parent);
				}
				else
				{
					assert(false);
				}

				break;
			}
			//不可能的情况,直接断言
			else
			{
				assert(false);
			}
		}

		return true;
	}

	//左单旋
	//注意点:
	//1.这是双向循环
	//2.注意parent的父节点的指向和被指向(注意可能是nullptr)
	//3.只有父节点和子节点 的平衡因子发生了改变
	//  父:2->0  子:1->0
	void RotateL(Node* parent)
	{
		Node* subR = parent->_right;
		Node* subRL = subR->_left;
		Node* gparent = parent->_parent;

		parent->_right = subRL;
		subRL->_parent = parent;
		subR->_left = parent;  
		parent->_parent = subR;

		//子节点指向爷爷节点
		subR->_parent = gparent;
		//爷爷节点是空
		if (gparent == nullptr)
		{
			_root = subR;
			_root->_parent = nullptr;
		} 
		else//让爷爷节点指向子节点
		{
			if (parent == gparent->_left)
			{
				gparent->_left = subR;
			}
			else
			{
				gparent->_right = subR;
			}
		}

		parent->_bf = subR->_bf = 0; //直接将父和子的平衡因子都置为0就行
	}

	//右单选
	void RotateR(Node* parent)
	{
		Node* subL = parent->_left;
		Node* subLR = subL->_right;
		Node* gparent = parent->_parent;

		parent->_left = subLR;
		if (subLR)
		{
			subLR->_parent = parent;
		}
		subL->_right = parent;
		parent->_parent = subL;

		_root->_parent = gparent;

		//if(_root == parent) //两个判断条件等价
		if (gparent == nullptr)
		{
			_root = subL;
		}
		else
		{
			if (gparent->_left == parent)
			{
				gparent->_left = subL;
			}
			else
			{
				gparent->_right = subL;
			}
		}

		subL->_bf = gparent->_bf = 0;
	}

	//左右双旋
	void RotateLR(Node* parent)
	{
		Node* subL = parent->_left;
		Node* subLR = subL->_right;
		int bf = subLR->_bf;

		RotateL(parent->_left);
		RotateL(parent->_right);

		if (bf == -1) // subLR左子树新增
		{
			subL->_bf = subLR->_bf = 0;
			parent->_bf = 1;
		}
		else if(bf == 1) //subLR右子树新增
		{
			subLR->_bf = parent->_bf = 0;
			subL->_bf = 1;
		}
		//这个情况容易被忽略
		else if(bf == 0) //sunLR自己是新增
		{
			subLR->_bf = subL->_bf = parent->_bf = 0;
		}
		else
		{
			assert(false);
		}
	}

	void RotateRL(Node* parent)
	{

	}

	void _Inorder()
	{
		_Inorder(_root);
	}

	void _Inorder(Node* root)
	{
		if (root == nullptr)
		{
			return;
		}

		_Inorder(root->_left);
		cout << root->_kv.first << ":" << root->_kv.second << endl;
		_Inorder(root->_right);
	}

	int Height(Node* root)
	{
		if (root == nullptr)
			return 0;
		int lh = Height(root->_left);
		int rh = Height(root->_right);

		return lh > rh ? lh + 1 : rh + 1;
	}

	bool IsBalance()
	{
		return _IsBalance(_root);
	}

	bool _IsBalance(Node* root)
	{
		if (root == nullptr)
		{
			return true;
		}

		int leftHeight = Height(root->_left);
		int rightHeight = Height(root->_right);

		if (rightHeight - leftHeight != root->_bf)
		{
			cout << "平衡因子异常" << endl;
			return false;
		}

		return abs(rightHeight - leftHeight) < 2 && IsBalance(root->_left) && IsBalance(root->_right);
	}

private:
	Node* _root = nullptr;
};

void TestAVLTree()
{
	int a[] = { 8,3,1,10,6,4,7,14,13 };
	AVLTree<int,int> t;
	for (auto e : a)
	{
		t.Insert(make_pair(e, e));
	}

	t._Inorder();

	cout << t.IsBalance() << endl;
}













